{"version":3,"file":"static/js/479.503b1ce1.chunk.js","mappings":"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","sources":["components/AppIcons.jsx","components/OverlayMenu.jsx","components/Settings.jsx"],"sourcesContent":["import \"./appicons.css\";\nimport React from \"react\";\nimport { AiFillHome } from \"react-icons/ai\";\nimport { AiOutlineUnorderedList } from \"react-icons/ai\";\nimport { AiOutlineLeft } from \"react-icons/ai\";\nimport { AiOutlineRight } from \"react-icons/ai\";\nimport { AiOutlineInfoCircle } from \"react-icons/ai\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport { AiOutlineSetting } from \"react-icons/ai\";\nimport { AiOutlineClose } from \"react-icons/ai\";\nimport { Link } from \"react-router-dom\";\nimport { collapseMenu } from \"./OverlayMenu\";\n\nexport const HomeIcon = (props) => {\n    return (\n            <Link className=\"icon-link\" to=\"/\">\n                <AiFillHome className=\"icon\" />\n                <small className=\"icon-label\">\n                       {props.label}\n                </small>\n            </Link>\n    )\n}\n\nexport const TocIcon = (props) => {\n    return (\n            <Link className=\"icon-link\" to=\"/toc\">\n                <AiOutlineUnorderedList className=\"icon\" />\n                <small className=\"icon-label\">\n                       {props.label}\n                </small>\n            </Link>\n    )\n}\n\nexport const InfoIcon = (props) => {\n    return (\n        <Link className=\"icon-link\" to=\"/about\">\n           <AiOutlineInfoCircle className=\"icon\" />\n            <small className=\"icon-label\">\n                {props.label}\n            </small>\n        </Link>\n    )\n}\n\nexport const SearchIcon = (props) => {\n    return (\n            <Link className=\"icon-link\" to=\"/search\">\n                <AiOutlineSearch className=\"icon\" />\n                <small className=\"icon-label\">{props.label}</small>\n            </Link>\n    )\n}\n\nexport const SettingsIcon = (props) => {\n    return (\n            <Link className=\"icon-link\" to=\"/settings\">\n                <AiOutlineSetting className=\"icon\" />\n                <small className=\"icon-label\">\n                    {props.label}\n                </small>\n            </Link>\n    )\n}\n\nexport const ArrowLeftIcon = (props) => {\n    const isDisabled = props.disabled;\n    let iconColor = \"\";\n    if (isDisabled) {\n        iconColor = \"#bdbbbb\";\n    }\n    return <AiOutlineLeft className=\"arrow-icon\"\n        style={{ color: iconColor }}\n    />\n}\n\nexport const ArrowRightIcon = (props) => {\n    const isDisabled = props.disabled;\n    let iconColor = \"\";\n    if (isDisabled) {\n        iconColor = \"#bdbbbb\";\n    }\n    return <AiOutlineRight className=\"arrow-icon\"\n        style={{ color: iconColor }}\n    />\n}\n\nexport const CloseIcon = () => {\n    return (\n        <div onClick={ () => {\n            collapseMenu();\n            window.history.back() }\n        }>\n            <AiOutlineClose className=\"close-icon\" />\n        </div>\n    )\n}\n","import \"./overlaymenu.css\";\nimport { HomeIcon } from \"./AppIcons\";\nimport { InfoIcon } from \"./AppIcons\";\nimport { SearchIcon } from \"./AppIcons\";\nimport { SettingsIcon } from \"./AppIcons\";\nimport { TocIcon } from \"./AppIcons\";\nimport React from \"react\";\n\nexport const collapseMenu = () => {\n        document.getElementById(\"menu-overlay-toggle\").checked = false;\n    }\n\nfunction OverlayMenu() {\n    return (\n        <div id=\"menu-overlay\">\n          <input type=\"checkbox\" id=\"menu-overlay-toggle\" name=\"menu-overlay-toggle\" aria-labelledby=\"menu-overlay-toggle\" />\n            <label htmlFor=\"menu-overlay-toggle\"></label>\n          <ul>\n            <li>\n              <div onClick={collapseMenu}>\n                <HomeIcon label={\"Naslovnica\"} />\n              </div>\n            </li><li>\n              <div onClick={collapseMenu}>\n                <TocIcon label={\"Sadržaj\"} />\n              </div>\n            </li><li>\n              <div onClick={collapseMenu}>\n                <SearchIcon label={\"Traženje pojma\"} />\n              </div>\n            </li><li>\n              <div onClick={collapseMenu}>\n                <SettingsIcon label={\"Podešavanje\"} />\n              </div>\n            </li><li>\n              <div onClick={collapseMenu}>\n                <InfoIcon label={\"O aplikaciji\"} />\n              </div>\n            </li>\n          </ul>\n        </div>\n    )\n}\n\nexport default OverlayMenu;","import {useState, useContext} from \"react\";\nimport ThemeSettingContext from \"../contexts/ThemeSettingContext\";\nimport FontSizeSettingContext from \"../contexts/FontSizeSettingContext\";\nimport BibleContext from \"../contexts/BibleContext\";\nimport { CloseIcon } from \"./AppIcons\";\n\nfunction Settings() {\n    const { handleTheme, theme } = useContext(ThemeSettingContext);\n    const { handleFontSize, theFontSize } = useContext(FontSizeSettingContext);\n    const { handleTestament, testament } = useContext(BibleContext);\n\n    const [currentTheme, setCurrentTheme] = useState(theme);\n    const [currentFontSize, setCurrentFontSize] = useState(theFontSize);\n    const [currentTestament, setCurrentTestament] = useState(testament);\n\n    const handleChange = (event) => {\n        const {name, value} = event.target;\n        if (name === \"themes\") {\n            setCurrentTheme(value);\n            handleTheme(value);\n        } else if(name === \"font-zoom\") {\n            setCurrentFontSize(value);\n            handleFontSize(value);\n        } else if ( name === \"randomVerse\") {\n            setCurrentTestament(value);\n            handleTestament(value);\n        }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n    }\n\n    return (\n        <div>\n            <div className=\"close-page\"><CloseIcon /></div>\n            <div className=\"settings\" onSubmit={handleSubmit}>\n              <div className=\"settings-item\">\n                <label htmlFor=\"themes\">Tema</label>\n                <select name=\"themes\" value={ currentTheme } onChange={handleChange}>\n                  <option value=\"nightTheme\">Noćna</option>\n                  <option value=\"dayTheme\">Dnevna</option>\n                  <option value=\"sepiaTheme\">Sepia</option>\n                </select>\n              </div>\n            <div className=\"settings-item\">\n                <label htmlFor=\"font-zoom\">Veličina slova</label>\n                <select name=\"font-zoom\" value={currentFontSize} onChange={handleChange}>\n                    <option value=\"fontZoomM\">M</option>\n                    <option value=\"fontZoomL\">L</option>\n                    <option value=\"fontZoomXL\">XL</option>\n                    <option value=\"fontZoomXXL\">2XL</option>\n                    <option value=\"fontZoomXXXL\">3XL</option>\n                </select>\n            </div>\n              <div className=\"settings-item\">\n                <label htmlFor=\"randomVerse\">Slučajan redak naslovnice iz </label>\n                <select name=\"randomVerse\" value={ currentTestament } onChange={handleChange}>\n                  <option value=\"new\">Novog Zavjeta</option>\n                  <option value=\"old\">Starog Zavjeta</option>\n                  <option value=\"both\">Cijele Biblije</option>\n                </select>\n              </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Settings;"],"names":["HomeIcon","props","className","to","label","TocIcon","InfoIcon","SearchIcon","SettingsIcon","CloseIcon","onClick","collapseMenu","window","history","back","document","getElementById","checked","id","type","name","htmlFor","useContext","ThemeSettingContext","handleTheme","theme","FontSizeSettingContext","handleFontSize","theFontSize","BibleContext","handleTestament","testament","useState","currentTheme","setCurrentTheme","currentFontSize","setCurrentFontSize","currentTestament","setCurrentTestament","handleChange","event","target","value","onSubmit","preventDefault","onChange"],"sourceRoot":""}