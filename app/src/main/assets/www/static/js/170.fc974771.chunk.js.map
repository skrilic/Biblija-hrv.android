{"version":3,"file":"static/js/170.fc974771.chunk.js","mappings":"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","sources":["components/AddBookmark.js","components/BookChapterVerse.jsx"],"sourcesContent":["import { db } from \"../db\";\n\n\nexport async function addBookmark(book, chapter) {\n    const remark = \"Knjižna oznaka\";\n    let datetime = (new Date()).toLocaleString();\n    //\n    const theBookmark = await db.notes.where({book: book, chapter: chapter}).first();\n    if (typeof theBookmark === 'undefined') {\n        try {\n            const newRecordId = await db.notes.add({\n                book,\n                chapter,\n                datetime,\n                remark\n            });\n            return newRecordId;\n\n        } catch (error) {\n            return 0; // Add failed!\n        }\n    } else {\n        return theBookmark.id;\n    }\n    //  \n}","\nimport \"./navbarHeader.css\";\nimport React, { useEffect, useState, useRef, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Navigate } from \"react-router-dom\";\nimport { collapseMenu } from \"./OverlayMenu\";\nimport VersesContext from \"../contexts/BibleContext\";\n\nimport { addBookmark } from \"./AddBookmark\";\n\nimport { getBook, getBookChapterNums, books } from \"../Utilities\";\nimport { Swiper, useSwiper, SwiperSlide } from \"swiper/react\";\n\nimport \"swiper/css\";\nimport \"swiper/css/pagination\";\nimport \"swiper/css/navigation\";\nimport \"./swiper_styles.css\";\nimport { Pagination, Navigation } from \"swiper\";\n\n\n\nimport loadable from \"@loadable/component\";\nimport { BookmarkIcon } from \"./AppIcons\";\nimport FooterBar from \"./FooterBar\";\nconst Chapter = loadable(() => import(\"./Chapter\"));\n\n\nfunction Book() {\n    const { book, chapter, verse_id } = useParams();\n    const [readWhat, setReadWhat] = useState({\n        \"book\": book,\n        \"chapter\": chapter || 1,\n    });\n\n    const verseId = verse_id || 0;\n\n    const [chapterArray, setChapterArray] = useState([]);\n\n    const [navbarVisible, setNavbarVisible] = useState(true);\n\n    const hasChapters = useRef(false);\n\n    const { handleReadPosition } = useContext(VersesContext);\n\n    const [bookmarkId, setBookmarkId] = useState(0);\n\n    document.getElementById(\"menu-overlay\").style.visibility = \"collapse\";\n    \n    const SwiperPosition = () => {\n        const swiper = useSwiper();\n\n        // Get from the Bible only selected book (and the chapter)\n        useEffect(() => {\n            let mounted = true;\n            \n            if (!hasChapters.current) {\n\n                if (mounted) {\n                    setChapterArray(getBookChapterNums(readWhat.book));\n                }\n\n                //Move slide\n                const index = Number(readWhat.chapter) - 1;\n                swiper.slideTo(index);\n\n                //Set readPosition\n                handleReadPosition(`/verse/${readWhat.book}/${readWhat.chapter}/0`);\n            }\n            hasChapters.current = true;\n            return () => mounted = false;\n        }, [swiper])\n\n        return (<></>)\n    }\n\n    function handleChange(event) {\n        const { name, value } = event.target;\n\n        setReadWhat(prevRead => {\n            if (name === \"book\") {\n                return { \"book\": value, \"chapter\": 1 };\n            }\n            else {\n                return {\n                    ...prevRead,\n                    [name]: value\n                };\n            }\n        });\n        hasChapters.current = false;\n    }\n\n    function handleSwipe(chptr) {\n        setReadWhat(prevVal => {\n            return { ...prevVal, chapter: chptr }\n        });\n        hasChapters.current = false;\n    }\n\n    function bookmarkThis() {\n        if (window.confirm(`Postavi knjižnu oznaku za ${getBook(readWhat.book).name} ${readWhat.chapter}`)) {\n            addBookmark(readWhat.book, readWhat.chapter)\n                .then(bmId => setBookmarkId(bmId))\n                .catch(setBookmarkId(0));\n        };\n    }\n\n    useEffect(() => {\n        const handleScroll = event => {\n            if (window.scrollY > 110) {\n                setNavbarVisible(false);\n            } else {\n                setNavbarVisible(true);\n            }\n        };\n    \n        window.addEventListener('scroll', handleScroll);\n    \n        return () => {\n          window.removeEventListener('scroll', handleScroll);\n        };\n      }, []);\n\n    return (\n        <div name=\"swiper-page\">\n            {\n                bookmarkId !== 0 ? <Navigate to={`/bookmark/${bookmarkId}`} /> :\n                    <div>\n                        <div className=\"navbar\" style={\n                            navbarVisible ? { \"visibility\": \"visible\" } : { \"visibility\": \"collapse\" }\n                        }>\n                            <div className=\"nav-item\">\n                                <select id=\"book-select\" name=\"book\" value={readWhat.book} onChange={handleChange}>\n                                    {books.map(\n                                        book => <option key={book.eng_short} value={book.eng_short}>{book.name}</option>\n                                    )\n                                    }\n                                </select>\n\n                                <select id=\"chapter-select\" name=\"chapter\" value={readWhat.chapter} onChange={handleChange}>\n                                    {chapterArray.map(\n                                        chapter => <option key={chapter} value={chapter}>{chapter}</option>\n                                    )\n                                    }\n                                </select>\n                            </div>\n\n                            <div className=\"nav-item bookmark-button\" onClick={() => bookmarkThis()}>\n                                <BookmarkIcon />\n                            </div>\n                        </div>\n\n                        {navbarVisible ? <div style={{ \"height\": \"3rem\" }}></div> : <></>}\n\n                        <Swiper\n                            pagination={{\n                                type: \"fraction\",\n                            }}\n                            navigation={true}\n                            modules={[Pagination, Navigation]}\n                            onSlideChange={(swiper) => {\n                                handleSwipe(swiper.activeIndex + 1);\n                                window.scrollTo(0, 0);\n                            }}\n                            // onScroll={console.log(\"Scrolling occured: \", window.scrollY)}\n                            // onSwiper={(swiper) => console.log(swiper)}\n                            // onTap={(swiper) => {\n                            //         setNavbarVisible(!navbarVisible)\n                            //     }}\n                            // onDoubleTap = {(swiper) => bookmarkThis()}\n                            onClick={collapseMenu}\n                            className=\"mySwiper\"\n                        >\n                            <SwiperPosition />\n                            {\n                                chapterArray.map((chptr) => {\n\n                                    return (\n                                        <SwiperSlide key={chptr}>\n                                            <Chapter\n                                                bookName={getBook(readWhat.book).name}\n                                                bookEngShort={readWhat.book}\n                                                chapter={readWhat.chapter}\n                                                markedVerse={Number(verseId)}\n                                            />\n                                        </SwiperSlide>\n                                    )\n                                })\n                            }\n                        </Swiper>\n                        <FooterBar visible={navbarVisible} />\n                    </div>\n            }\n        </div>\n    )\n}\n\nexport default Book;"],"names":["book","chapter","remark","datetime","Date","toLocaleString","db","first","theBookmark","newRecordId","id","Chapter","loadable","useParams","verse_id","useState","readWhat","setReadWhat","verseId","chapterArray","setChapterArray","navbarVisible","setNavbarVisible","hasChapters","useRef","handleReadPosition","useContext","VersesContext","bookmarkId","setBookmarkId","document","getElementById","style","visibility","SwiperPosition","swiper","useSwiper","useEffect","mounted","current","getBookChapterNums","index","Number","slideTo","handleChange","event","target","name","value","prevRead","bookmarkThis","window","confirm","getBook","addBookmark","then","bmId","catch","handleScroll","scrollY","addEventListener","removeEventListener","to","className","onChange","books","eng_short","map","onClick","pagination","type","navigation","modules","Pagination","Navigation","onSlideChange","chptr","activeIndex","prevVal","scrollTo","collapseMenu","bookName","bookEngShort","markedVerse","FooterBar","visible"],"sourceRoot":""}